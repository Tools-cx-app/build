# NOTES:
# If cmake LLVM_ENABLE_PROJECTS does not include clang, it does not work as expected.
# lldb 1:57 81 files
# clang 2:35 103
# 123

name: Build hello Cosmo
on:
  push:
    paths: .github/workflows/build_hello_cosmo.yaml
  workflow_dispatch:
    # inputs:
    #   version:
    #     description: "Release version:"
    #     default: "19.1.7"
    #     required: true
    #   projects:
    #     description: "Projects to build:"
    #     # bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
    #     default: "clang;clang-tools-extra;lld"
    #     required: true

jobs:
  build:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [aarch64, x86_64]
    env:
      ROOTDIR: ${{github.workspace}}
      #   TARGET: ${{matrix.target}}
      BUILD_DIR: ${{github.workspace}}/build
      #   HOST_BUILD_DIR: ${{github.workspace}}/build/host
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      # TARGET_INSTALL_DIR: ${{github.workspace}}/output
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
    steps:
      - name: Checkout llvm-project
        uses: actions/checkout@v4.2.2

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3

      - name: Install dependencies
        run: |
          sudo apt install ninja-build binfmt-support qemu-user-static

      - name: Build
        run: |
          PREFIX="${{matrix.target}}-unknown-cosmo"
          export CC=${PREFIX}-cc
          export CXX=${PREFIX}-c++
          export LD=${PREFIX}-ld
          export OBJCOPY=${PREFIX}-objcopy
          export AR=${PREFIX}-ar
          export STRIP=${PREFIX}-strip

          # Create hello.c
          cat <<EOF >hello.c
          #include <stdio.h>
          int main() {
              printf("Hello, World!\n");
              return 0;
          }
          EOF

          mkdir -p ${TARGET_INSTALL_DIR}/bin
          $CC hello.c -o ${TARGET_INSTALL_DIR}/bin/hello

      - name: Check
        run: |
          file ${TARGET_INSTALL_DIR}/bin/hello
          tree ${TARGET_INSTALL_DIR}
          
      - uses: actions/upload-artifact@v4
        with:
          name: hello-${{matrix.target}}
          path: ${{github.workspace}}/output/${{matrix.target}}/bin/hello

 # Optionally add another job to process or download the artifacts
  process_artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      # with:
        # # Name of the artifact to download.
        # # If unspecified, all artifacts for the run are downloaded.
        # # Optional.
        # name:
    
        # # Destination path. Supports basic tilde expansion.
        # # Optional. Default is $GITHUB_WORKSPACE
        # path:

      # - uses: zongou/ga-vscode-server@0.0.1

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        # with:
          # version: 4.0.2

      - name: Process artifacts
        run: |
          mkdir -p ${{github.workspace}}/output/ape/bin/
          fixupobj ${{github.workspace}}/hello-aarch64/hello
          fixupobj ${{github.workspace}}/hello-x86_64/hello

          COSMO=$(dirname $(dirname $(command -v cosmocc)))

          apelink -V -1 \
            -l ${COSMO}/bin/ape-x86_64.elf \
            -l ${COSMO}/bin/ape-aarch64.elf \
            -M ${COSMO}/bin/ape-m1.c \
            -o ${{github.workspace}}/output/ape/bin/hello.exe \
            -s ${{github.workspace}}/hello-aarch64/hello ${{github.workspace}}/hello-x86_64/hello

      - uses: actions/download-artifact@v4
        with:
          path: ${{github.workspace}}/output/ape/bin/hello.exe

      #   run: |
      #     tarball_name=$(echo "${{inputs.projects}}" | tr ";" "+")-${{inputs.version}}-${{matrix.target}}
      #     echo tarball_name=${tarball_name} >> ${GITHUB_ENV}
      #     mv ${TARGET_INSTALL_DIR}/llvm ${tarball_name}
      #     tar -c ${tarball_name} | xz -T0 -v >${tarball_name}.tar.xz
      # - name: Upload release
      #   uses: ncipollo/release-action@v1.14.0
      #   with:
      #     tag: "llvm-${{inputs.version}}"
      #     artifacts: ${{env.tarball_name}}.tar.xz
      #     allowUpdates: true
      #     replacesArtifacts: true
      #     body: |
      #       [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
