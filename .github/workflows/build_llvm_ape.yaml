# NOTES:
# If cmake LLVM_ENABLE_PROJECTS does not include clang, it does not work as expected.
# lldb 1:57 81 files
# clang 2:35 103
# 123

name: Build LLVM APE
run-name: Build llvm-${{inputs.version}} APE
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version:"
        default: "19.1.7"
        required: true
    #   projects:
    #     description: "Projects to build:"
    #     # bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
    #     default: "clang;clang-tools-extra;lld"
    #     required: true

jobs:
  build:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [aarch64, x86_64]
    env:
      ROOTDIR: ${{github.workspace}}
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
    steps:
      - name: Checkout llvm-project
        uses: actions/checkout@v4.1.1
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{inputs.version}}
          fetch-depth: 1

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        # with:
        # Cosmopolitan release version
        # version: # default is latest

      - name: Patch source code
        run: |
          curl -LkSs https://github.com/ahgamut/superconfigure/raw/refs/heads/main/compiler/llvm/minimal.diff | patch -up1

      - name: Install dependencies
        run: |
          sudo apt install ninja-build binfmt-support qemu-user-static

      - name: Build
        run: |
          PREFIX="${{matrix.target}}-unknown-cosmo"
          export CC=${PREFIX}-cc
          export CXX=${PREFIX}-c++
          export LD=${PREFIX}-ld
          export OBJCOPY=${PREFIX}-objcopy
          export AR=${PREFIX}-ar
          export STRIP=${PREFIX}-strip

          cmake -S "$ROOTDIR/llvm" -B "${TARGET_BUILD_DIR}" -G Ninja \
            -DCMAKE_SKIP_RPATH=true \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=false \
            -DCMAKE_STRIP="" \
            -DCMAKE_INSTALL_DO_STRIP=OFF \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_INSTALL_PREFIX="$TARGET_INSTALL_DIR" \
            -DCMAKE_INSTALL_OLDINCLUDEDIR="$TARGET_INSTALL_DIR/include" \
            -DBacktrace_INCLUDE_DIR="$TARGET_INSTALL_DIR/include" \
            -DC_INCLUDE_DIRS="$TARGET_INSTALL_DIR/include" \
            -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
            -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc --all)" \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_BUILD_STATIC=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_BUILD_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_BUILD_TESTS=OFF \
            -DCLANG_INCLUDE_TESTS=OFF \
            -DCLANG_BUILD_TESTS=OFF \
            -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
            -DCLANG_TOOL_APINOTES_TEST_BUILD=OFF \
            -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
            -DLLVM_TOOL_C_TEST_BUILD=OFF \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DLLVM_ENABLE_PIC=OFF \
            -DLLVM_ENABLE_LIBCXX=OFF \
            -DLLVM_ENABLE_LLVM_LIBC=OFF \
            -DLLVM_ENABLE_UNWIND_TABLES=OFF \
            -DLLVM_ENABLE_EH=OFF \
            -DLLVM_ENABLE_RTTI=OFF \
            -DLLVM_ENABLE_LTO=OFF \
            -DLLVM_ENABLE_MODULES=OFF \
            -DLLVM_ENABLE_PEDANTIC=OFF \
            -DLLVM_ENABLE_FFI=OFF \
            -DLLVM_ENABLE_LIBPFM=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_CURL=OFF \
            -DLLVM_ENABLE_ZLIB=OFF \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_ENABLE_THREADS=ON \
            -DCMAKE_EXE_LINKER_FLAGS="-Wl,--no-warnings"

          cmake --build "${TARGET_BUILD_DIR}" --target install

      - name: Check
        run: |
          file ${TARGET_INSTALL_DIR}/bin/*
          tree ${TARGET_INSTALL_DIR}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.target}}
          path: ${{github.workspace}}/output/${{matrix.target}}/bin


  process_artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
    
    - name: Install cosmocc
      uses: bjia56/setup-cosmocc@v0.0.3
    
    - uses: zongou/ga-vscode-server@0.0.1

    - name: Process artifacts
      run: |
        COSMO=$(dirname $(dirname $(command -v cosmocc)))

    #     mkdir -p ${{github.workspace}}/output/ape/bin/
    #     fixupobj ${{github.workspace}}/hello-aarch64/hello
    #     fixupobj ${{github.workspace}}/hello-x86_64/hello

    #     apelink -V -1 \
    #       -l ${COSMO}/bin/ape-x86_64.elf \
    #       -l ${COSMO}/bin/ape-aarch64.elf \
    #       -M ${COSMO}/bin/ape-m1.c \
    #       -o ${{github.workspace}}/output/ape/bin/hello.exe \
    #       -s ${{github.workspace}}/hello-aarch64/hello ${{github.workspace}}/hello-x86_64/hello

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: hello-ape
    #     path: ${{github.workspace}}/output/ape/bin/hello.exe

    #   # - name: Compress
    #   #   run: |
    #   #     tarball_name=$(echo "${{inputs.projects}}" | tr ";" "+")-${{inputs.version}}-${{matrix.target}}
    #   #     echo tarball_name=${tarball_name} >> ${GITHUB_ENV}
    #   #     mv ${TARGET_INSTALL_DIR}/llvm ${tarball_name}
    #   #     tar -c ${tarball_name} | xz -T0 -v >${tarball_name}.tar.xz
    #   # - name: Upload release
    #   #   uses: ncipollo/release-action@v1.14.0
    #   #   with:
    #   #     tag: "llvm-${{inputs.version}}"
    #   #     artifacts: ${{env.tarball_name}}.tar.xz
    #   #     allowUpdates: true
    #   #     replacesArtifacts: true
    #   #     body: |
    #   #       [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
