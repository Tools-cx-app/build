# NOTES:
# If cmake LLVM_ENABLE_PROJECTS does not include clang, it does not work as expected.
# lldb 1:57 81 files
# clang 2:35 103
# 123

name: Build LLVM APE
run-name: Build llvm-${{inputs.version}} APE
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version:"
        default: "19.1.7"
        required: true
      projects:
        description: "Projects to build:"
        # bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
        default: "clang;clang-tools-extra;lld"
        required: true

jobs:
  build:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [aarch64, x86_64]
    env:
      ROOTDIR: ${{github.workspace}}
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
    steps:
      - name: Checkout llvm-project
        uses: actions/checkout@v4.1.1
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{inputs.version}}
          fetch-depth: 1

      - name: Patch LLVM source code
        run: |
          curl -LkSs https://github.com/ahgamut/superconfigure/raw/refs/heads/main/compiler/llvm/minimal.diff | patch -up1

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3

      - name: Install dependencies
        run: |
          sudo apt install ninja-build binfmt-support qemu-user-static

      - name: Build dependencies
        run : |
          PREFIX="${{matrix.target}}-unknown-cosmo"
          export CC=${PREFIX}-cc
          export CXX=${PREFIX}-c++
          export LD=${PREFIX}-ld
          export OBJCOPY=${PREFIX}-objcopy
          export AR=${PREFIX}-ar
          export STRIP=${PREFIX}-strip

          rm -rf build output/ zlib/ zstd/

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libz.a; then
              if ! test -d zlib; then
                  zlib_version=1.3.1
                  curl https://github.com/madler/zlib/releases/download/v${zlib_version}/zlib-${zlib_version}.tar.xz -LkSs | xz -d | tar -x
                  mv zlib-${zlib_version} zlib
              fi
              mkdir -p "${TARGET_BUILD_DIR}"/zlib
              (
                  cd ${ROOTDIR}/zlib
                  ./configure --prefix="${TARGET_INSTALL_DIR}" --static
                  make -j"$(nproc --all)" install
              )
          fi
          echo "zlib is built"

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libzstd.a; then
              if ! test -d zstd; then
                  curl https://ghfast.top/https://github.com/facebook/zstd/archive/refs/tags/v1.5.6.tar.gz -LkSs | gzip -d | tar -x
                  mv zstd-1.5.6 zstd
              fi
              make -j"$(nproc --all)" -C zstd/lib CC="${CC}" CXX="${CXX}" PREFIX="${TARGET_INSTALL_DIR}" install-static
          fi

          echo Done

      - name: Build LLVM
        run: |
          PREFIX="${{matrix.target}}-unknown-cosmo"
          export CC=${PREFIX}-cc
          export CXX=${PREFIX}-c++
          export LD=${PREFIX}-ld
          export OBJCOPY=${PREFIX}-objcopy
          export AR=${PREFIX}-ar
          export STRIP=${PREFIX}-strip
          export AS=${PREFIX}-as

          cmake -S "$ROOTDIR/llvm" -B "${TARGET_BUILD_DIR}" -G Ninja \
            -DCMAKE_INSTALL_PREFIX="${TARGET_INSTALL_DIR}" \
            -DCMAKE_PREFIX_PATH="${TARGET_INSTALL_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_ASM_COMPILER="${CC}" \
            -DLLVM_ENABLE_PROJECTS="${{inputs.projects}}" \
            -DLLVM_ENABLE_ZLIB=FORCE_ON \
            -DLLVM_ENABLE_ZSTD=FORCE_ON \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_BUILD_STATIC=ON \
            -DCLANG_ENABLE_ARCMT=ON \
            -DLIBCLANG_BUILD_STATIC=ON \
            -DCMAKE_SKIP_INSTALL_RPATH=TRUE

          cmake --build "${TARGET_BUILD_DIR}" --target install

      - name: Check and archive
        run: |
          file ${TARGET_INSTALL_DIR}/bin/*
          tree ${TARGET_INSTALL_DIR}
          tar -C ${TARGET_INSTALL_DIR} -c bin >${{matrix.target}}.tar

      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.target}}
          path: ${{matrix.target}}.tar

  process_artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Extract artifacts
        run: |
          # mkdir -p x86_64
          # mkdir -p aarch64
          mv x86_64/x86_64.tar .
          mv aarch64/aarch64.tar .
          tar -C x86_64 -xf x86_64.tar
          tar -C aarch64 -xf aarch64.tar

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3

      - name: Link APE
        run: |
          COSMO=$(dirname "$(dirname "$(command -v cosmocc)")")

          mkdir -p ape/bin
          find x86_64 -type l,f | while IFS= read -r file; do
            bname=$(basename "${file}")
            if [ -h "${file}" ] || ! file "${file}" | grep ELF -q; then
              echo "copy ${bname}"
              cp -d "x86_64/bin/${bname}" "ape/bin/${bname}"
            else
              echo "fixupobj ${bname}"
              fixupobj "x86_64/bin/${bname}"
              fixupobj "aarch64/bin/${bname}"

              echo "apelink ${bname}"
              apelink -V -1 \
                -l "${COSMO}/bin/ape-x86_64.elf" \
                -l "${COSMO}/bin/ape-aarch64.elf" \
                -M "${COSMO}/bin/ape-m1.c" \
                -o "ape/bin/${bname}" \
                -s "x86_64/bin/${bname}" "aarch64/bin/${bname}"
            fi
          done

      - name: Compress
        run: |
          tarball_name=$(echo "${{inputs.projects}}" | tr ";" "+")-${{inputs.version}}-ape
          echo tarball_name=${tarball_name} >> ${GITHUB_ENV}
          mkdir ${tarball_name}
          mv ape ${tarball_name}
          tar -c ${tarball_name} | xz -T0 -v >${tarball_name}.tar.xz

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.tarball_name}}
          path: ${{env.tarball_name}}.tar.xz

      - name: Upload release
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: "llvm-${{inputs.version}}-ape"
          artifacts: ${{env.tarball_name}}.tar.xz
          allowUpdates: true
          replacesArtifacts: true
          body: |
            [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})

      - uses: zongou/ga-vscode-server@0.0.1
        name: Open VS Code server to Handle Failure (Run on any failure)
        if: failure()
        with:
          # VS Code quality: stable, insider
          # Default: stable
          quality: ""