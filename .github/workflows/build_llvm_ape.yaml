# NOTES:
# If cmake LLVM_ENABLE_PROJECTS does not include clang, it does not work as expected.
# lldb 1:57 81 files
# clang 2:35 103
# 123

name: Build LLVM APE
run-name: Build llvm-${{inputs.version}} APE
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version:"
        default: "19.1.7"
        required: true
      projects:
        description: "Projects to build:"
        # bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
        default: "clang;clang-tools-extra;lld"
        required: true

jobs:
  build:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [aarch64, x86_64]
    env:
      ROOTDIR: ${{github.workspace}}
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
    steps:
      - name: Checkout llvm-project
        uses: actions/checkout@v4.1.1
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{inputs.version}}
          fetch-depth: 1

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        # with:
        # Cosmopolitan release version
        # version: # default is latest

      - name: Patch source code
        run: |
          curl -LkSs https://github.com/ahgamut/superconfigure/raw/refs/heads/main/compiler/llvm/minimal.diff | patch -up1

      - name: Install dependencies
        run: |
          sudo apt install ninja-build binfmt-support qemu-user-static

      - name: Build dependencies
        run : |
          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libz.a; then
            if ! test -d zlib; then
              zlib_version=1.3.1
              curl https://github.com/madler/zlib/releases/download/v${zlib_version}/zlib-${zlib_version}.tar.xz -LkSs | xz -d | tar -x
              mv zlib-${zlib_version} zlib
            fi
            mkdir -p "${TARGET_BUILD_DIR}"/zlib
            cmake -S "$ROOTDIR/zlib" -B "${TARGET_BUILD_DIR}"/zlib \
              -DCMAKE_INSTALL_PREFIX="${TARGET_INSTALL_DIR}" \
              -DCMAKE_PREFIX_PATH="${TARGET_INSTALL_DIR}" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CROSSCOMPILING=True \
              -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" \
              -DCMAKE_C_COMPILER="${{matrix.target}}-unknown-cosmo-cc" \
              -DCMAKE_CXX_COMPILER="${{matrix.target}}-unknown-cosmo-c++" \
              -DCMAKE_ASM_COMPILER="${{matrix.target}}-unknown-cosmo-cc"

            cmake --build "${TARGET_BUILD_DIR}"/zlib --target install
          fi

          if ! test -f "${TARGET_INSTALL_DIR}"/lib/libzstd.a; then
            if ! test -d zstd; then
              curl https://github.com/facebook/zstd/archive/refs/tags/v1.5.6.tar.gz -LkSs | gzip -d | tar -x
              mv zstd-1.5.6 zstd
            fi
            make -C zstd CC="${{matrix.target}}-unknown-cosmo-cc" CXX="${{matrix.target}}-unknown-cosmo-c++" PREFIX="${TARGET_INSTALL_DIR}" install
          fi

      - name: Build
        run: |
          PREFIX="${{matrix.target}}-unknown-cosmo"
          export CC=${PREFIX}-cc
          export CXX=${PREFIX}-c++
          export LD=${PREFIX}-ld
          export OBJCOPY=${PREFIX}-objcopy
          export AR=${PREFIX}-ar
          export STRIP=${PREFIX}-strip

          cmake -S "$ROOTDIR/llvm" -B "${TARGET_BUILD_DIR}" -G Ninja \
            -DCMAKE_SKIP_RPATH=true \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=false \
            -DCMAKE_STRIP="" \
            -DCMAKE_INSTALL_DO_STRIP=OFF \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_INSTALL_PREFIX="$TARGET_INSTALL_DIR" \
            -DLLVM_ENABLE_PROJECTS="${{inputs.projects}}" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
            -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc --all)" \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_BUILD_STATIC=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_BUILD_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_BUILD_TESTS=OFF \
            -DCLANG_INCLUDE_TESTS=OFF \
            -DCLANG_BUILD_TESTS=OFF \
            -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
            -DCLANG_TOOL_APINOTES_TEST_BUILD=OFF \
            -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
            -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
            -DLLVM_TOOL_C_TEST_BUILD=OFF \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DLLVM_ENABLE_PIC=OFF \
            -DLLVM_ENABLE_LIBCXX=OFF \
            -DLLVM_ENABLE_LLVM_LIBC=OFF \
            -DLLVM_ENABLE_UNWIND_TABLES=OFF \
            -DLLVM_ENABLE_EH=OFF \
            -DLLVM_ENABLE_RTTI=OFF \
            -DLLVM_ENABLE_LTO=OFF \
            -DLLVM_ENABLE_MODULES=OFF \
            -DLLVM_ENABLE_PEDANTIC=OFF \
            -DLLVM_ENABLE_FFI=OFF \
            -DLLVM_ENABLE_LIBPFM=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_CURL=OFF \
            -DLLVM_ENABLE_ZLIB=OFF \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_ENABLE_THREADS=ON \
            \
            -DCMAKE_SKIP_INSTALL_RPATH=TRUE

          cmake --build "${TARGET_BUILD_DIR}" --target install

      - name: Check and archive
        run: |
          file ${TARGET_INSTALL_DIR}/bin/*
          tree ${TARGET_INSTALL_DIR}
          tar -C ${TARGET_INSTALL_DIR} -c bin >${{matrix.target}}.tar

      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.target}}
          path: ${{matrix.target}}.tar

  process_artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Extract artifacts
        run: |
          # mkdir -p x86_64
          # mkdir -p aarch64
          mv x86_64/x86_64.tar .
          mv aarch64/aarch64.tar .
          tar -C x86_64 -xf x86_64.tar
          tar -C aarch64 -xf aarch64.tar

      - name: Install cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3

      # - uses: zongou/ga-vscode-server@0.0.1

      - name: Link APE
        run: |
          COSMO=$(dirname "$(dirname "$(command -v cosmocc)")")

          mkdir -p ape/bin
          find x86_64 -type l,f | while IFS= read -r file; do
            bname=$(basename "${file}")
            if [ -h "${file}" ] || ! file "${file}" | grep ELF -q; then
              echo "copy ${bname}"
              cp -d "x86_64/bin/${bname}" "ape/bin/${bname}"
            else
              echo "fixupobj ${bname}"
              fixupobj "x86_64/bin/${bname}"
              fixupobj "aarch64/bin/${bname}"

              echo "apelink ${bname}"
              apelink -V -1 \
                -l "${COSMO}/bin/ape-x86_64.elf" \
                -l "${COSMO}/bin/ape-aarch64.elf" \
                -M "${COSMO}/bin/ape-m1.c" \
                -o "ape/bin/${bname}" \
                -s "x86_64/bin/${bname}" "aarch64/bin/${bname}"
            fi
          done

      - name: Compress
        run: |
          tarball_name=$(echo "${{inputs.projects}}" | tr ";" "+")-${{inputs.version}}-ape
          echo tarball_name=${tarball_name} >> ${GITHUB_ENV}
          mkdir ${tarball_name}
          mv ape ${tarball_name}
          tar -c ${tarball_name} | xz -T0 -v >${tarball_name}.tar.xz

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{env.tarball_name}}
      #     path: ${{env.tarball_name}}.tar.xz

      - name: Upload release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: "llvm-${{inputs.version}}-ape"
          artifacts: ${{env.tarball_name}}.tar.xz
          allowUpdates: true
          replacesArtifacts: true
          body: |
            [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
